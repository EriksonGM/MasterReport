// <auto-generated />
using System;
using MasterReport.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MasterReport.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("MasterReport.Data.Entites.DataSource", b =>
                {
                    b.Property<Guid>("DataSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("TEXT");

                    b.Property<int>("DataSourceTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("DataSourceId");

                    b.HasIndex("DataSourceTypeId");

                    b.ToTable("DataSources");
                });

            modelBuilder.Entity("MasterReport.Data.Entites.DataSourceType", b =>
                {
                    b.Property<int>("DataSourceTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataSourceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("DataSourceTypeId");

                    b.ToTable("DataSourceTypes");

                    b.HasData(
                        new
                        {
                            DataSourceTypeId = 1,
                            DataSourceName = "Microsoft SQL Server"
                        },
                        new
                        {
                            DataSourceTypeId = 2,
                            DataSourceName = "MySQL"
                        },
                        new
                        {
                            DataSourceTypeId = 3,
                            DataSourceName = "PostgreSQL"
                        });
                });

            modelBuilder.Entity("MasterReport.Data.Entites.Destiny", b =>
                {
                    b.Property<Guid>("DestinyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("TEXT");

                    b.HasKey("DestinyId");

                    b.HasIndex("ReportId");

                    b.ToTable("Destinies");
                });

            modelBuilder.Entity("MasterReport.Data.Entites.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DataSourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentId");

                    b.HasIndex("DataSourceId");

                    b.HasIndex("ReportId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("MasterReport.Data.Entites.EmailAccount", b =>
                {
                    b.Property<Guid>("EmailAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SmtpServer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("SslOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("EmailAccountId");

                    b.HasIndex("SslOptionId");

                    b.ToTable("EmailAccounts");
                });

            modelBuilder.Entity("MasterReport.Data.Entites.ExecutionHistory", b =>
                {
                    b.Property<int>("ExecutionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExecutionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Obs")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Succeeded")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExecutionHistoryId");

                    b.HasIndex("ExecutionTypeId");

                    b.HasIndex("ReportId");

                    b.ToTable("ExecutionHistories");
                });

            modelBuilder.Entity("MasterReport.Data.Entites.ExecutionType", b =>
                {
                    b.Property<int>("ExecutionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("ExecutionTypeId");

                    b.ToTable("ExecutionTypes");

                    b.HasData(
                        new
                        {
                            ExecutionTypeId = 1,
                            TypeName = "Manual"
                        },
                        new
                        {
                            ExecutionTypeId = 2,
                            TypeName = "Scheduled"
                        });
                });

            modelBuilder.Entity("MasterReport.Data.Entites.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmailAccountId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Force")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastExecution")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextExecution")
                        .HasColumnType("TEXT");

                    b.HasKey("ReportId");

                    b.HasIndex("EmailAccountId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("MasterReport.Data.Entites.SslOption", b =>
                {
                    b.Property<int>("SslOptionsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("SslOptionsId");

                    b.ToTable("SslOptions");

                    b.HasData(
                        new
                        {
                            SslOptionsId = 1,
                            Option = "None"
                        },
                        new
                        {
                            SslOptionsId = 2,
                            Option = "Auto"
                        },
                        new
                        {
                            SslOptionsId = 3,
                            Option = "SslOnConnect"
                        },
                        new
                        {
                            SslOptionsId = 4,
                            Option = "StartTls"
                        },
                        new
                        {
                            SslOptionsId = 5,
                            Option = "StartTlsWhenAvailable"
                        });
                });

            modelBuilder.Entity("MasterReport.Data.Entites.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Active = true,
                            Email = "admin@admin.com",
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            Password = "$2a$14$4yrM/g9wcEbukfdtmvB4KOiZPLut5.VPX.MAsYUkNzCV/hyRB3DA2"
                        });
                });

            modelBuilder.Entity("MasterReport.Data.Entites.DataSource", b =>
                {
                    b.HasOne("MasterReport.Data.Entites.DataSourceType", "DataSourceType")
                        .WithMany()
                        .HasForeignKey("DataSourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSourceType");
                });

            modelBuilder.Entity("MasterReport.Data.Entites.Destiny", b =>
                {
                    b.HasOne("MasterReport.Data.Entites.Report", "Report")
                        .WithMany("Destinies")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("MasterReport.Data.Entites.Document", b =>
                {
                    b.HasOne("MasterReport.Data.Entites.DataSource", "DataSource")
                        .WithMany()
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterReport.Data.Entites.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSource");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("MasterReport.Data.Entites.EmailAccount", b =>
                {
                    b.HasOne("MasterReport.Data.Entites.SslOption", "SslOption")
                        .WithMany()
                        .HasForeignKey("SslOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SslOption");
                });

            modelBuilder.Entity("MasterReport.Data.Entites.ExecutionHistory", b =>
                {
                    b.HasOne("MasterReport.Data.Entites.ExecutionType", "ExecutionType")
                        .WithMany()
                        .HasForeignKey("ExecutionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterReport.Data.Entites.Report", "Report")
                        .WithMany("History")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutionType");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("MasterReport.Data.Entites.Report", b =>
                {
                    b.HasOne("MasterReport.Data.Entites.EmailAccount", "EmailAccount")
                        .WithMany()
                        .HasForeignKey("EmailAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailAccount");
                });

            modelBuilder.Entity("MasterReport.Data.Entites.Report", b =>
                {
                    b.Navigation("Destinies");

                    b.Navigation("History");
                });
#pragma warning restore 612, 618
        }
    }
}
